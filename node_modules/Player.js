/*jshint esnext: true */
'use strict';

function ArtificialPlayer(options) {
  var player = Player(options);
  var originalPlayerUpdateFunc = player.update;

  player.update = function update(context) {
    options.act(player, context);

    originalPlayerUpdateFunc();
  };

  Object.defineProperty(player, 'isArtificial', {
    get: function () {
      return true;
    },
    enumerable: true
  });


  return player;
}

function Player(options) {
  console.log('Player', arguments);
  //var id = Math.abs((new String(Math.random())).hashCode());
  var id = options && options.id ? options.id : (String(Math.random()));
  var name = id.replace(/[^0-9a-zA-Z]/gi, '')
    .replace(/[^0-9a-zA-Z]/gi, '')
    .replace(/(\d\d)(?=\d)/gi, '$1' + ' ')
    .replace(/([a-zA-Z])/gi, '$1' + ' ')
    .replace(/([0-9])([a-zA-Z])/gi, '$1' + ' ' + '$2')
    .split(' ')
    .map(function (value, key) {
      // Convert non-characters to characters
      var mappedValue = Number.isNaN(Number(value)) ? value : String.fromCharCode(value % 26 + 97)
        // console.log(id, arguments[2], value, mappedValue)
      return mappedValue;
    })
    .join('')
    .toUpperCase();
  var position = options && options.position ? options.position : 0;
  var energy = options && options.energy ? options.energy : 0;

  var iteration = 0;

  var life = 1;
  var isReady = false;

  var actionFlag = false;
  var positionHistory = {}
  positionHistory[iteration] = position;


  function update() {
    // console.log(toString(),'update()');
    // if(!player.isArtificial){
    //   console.log('');
    // }
    iteration += 1;

    if (!isLiving()) {
      return;
    }

    if (actionFlag) {
      move();
    } else {
      stay();
    }

    actionFlag = false;
  }

  function act() {
    // console.log(toString(),'act()');
    actionFlag = true;
  }

  function injure() {
    life--;
  }

  function move() {
    if (energy > 0) {
      var positionChange = Math.floor(energy ^ 1.5)
      if (positionChange > 0) {
        position += positionChange;
        positionHistory[iteration] = position;
      }
      energy = 0;

    } else {
      stay();
    }
  }

  function stay() {
    energy++;
  }

  function toString() {
    return JSON.stringify({
      id: id,
      isLiving: isLiving(),
      position: position,
      life: life
    });
  }

  function isLiving() {
    return life > 0;
  }

  function ready() {
    isReady = !isReady;
  }

  var player = {
    act: act,
    update: update,
    injure: injure,
    ready: ready,
    // isLiving: isLiving,
    toString: toString
  };

  Object.defineProperty(player, 'isLiving', {
    get: function () {
      return isLiving();
    },
    enumerable: true
  });

  Object.defineProperty(player, 'id', {
    get: function () {
      return id;
    },
    enumerable: true
  });

  Object.defineProperty(player, 'name', {
    get: function () {
      return name;
    },
    enumerable: true
  });

  Object.defineProperty(player, 'iteration', {
    get: function () {
      return iteration;
    },
    enumerable: true
  });

  Object.defineProperty(player, 'actionFlag', {
    get: function () {
      return actionFlag;
    },
    enumerable: true
  });

  Object.defineProperty(player, 'position', {
    get: function () {
      return position;
    },
    enumerable: true
  });

  Object.defineProperty(player, 'energy', {
    get: function () {
      return energy;
    },
    enumerable: true
  });

  Object.defineProperty(player, 'life', {
    get: function () {
      return life;
    },
    enumerable: true
  });

  Object.defineProperty(player, 'isReady', {
    get: function () {
      return isReady;
    },
    enumerable: true
  });

  Object.defineProperty(player, 'positionHistory', {
    get: function () {
      return positionHistory;
    },
    enumerable: true
  });

  return player;
}

var actFunctions = (function () {
  function randomPlayerActFunc(player, context) {
    if (Math.random() > 0.5) {
      player.act();
    }
  }

  return {
    random: randomPlayerActFunc
  };
})();

exports.Player = Player;
exports.ArtificialPlayer = ArtificialPlayer;
exports.actFunctions = actFunctions;
