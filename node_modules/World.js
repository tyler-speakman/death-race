'use strict';

String.prototype.hashCode = function () {
  var hash = 0,
    i, chr, len;
  if (this.length == 0) return hash;
  for (i = 0, len = this.length; i < len; i++) {
    chr = this.charCodeAt(i);
    hash = ((hash << 5) - hash) + chr;
    hash |= 0; // Convert to 32bit integer
  }
  return hash;
};


// Object.prototype.log = function(options) {

//   var obj = this;
//   if ((typeof obj === "object" && obj !== null) ||
//     (Array.isArray ? Array.isArray(obj) : obj instanceof Array) ||
//     (typeof obj === "function")) {


//     for (var key in obj) {
//       if (typeof obj[key] === "function") {

//         if(options && options.exclude && options.exclude.indexOf(key)>-1){
//           continue;
//         }


//         obj[key] = function(){
//           console.log('abc',key);

//           return obj[key].apply(obj,arguments);
//         }
//       }
//     }
//   }
//   return obj;
// };

var clone = function (o) {
  // Create a new object with this as its prototype
  var obj = Object.create(o);

  /* actually not necessary:
  // Apply the constructor on the new object
  this.constructor.apply(p, arguments);
  */

  if ((typeof obj === "object" && obj !== null) ||
    (Array.isArray ? Array.isArray(obj) : obj instanceof Array) ||
    (typeof obj === "function")) {

    Object.freeze(obj);

    for (var key in obj) {
      if (obj.hasOwnProperty(key)) {
        makeImmutable(obj[key]);
      }
    }
  }
  return obj;
};



function World(tmpDeathWall) {
  var players = [];
  // var playerPositions = [];
  var deathWall = tmpDeathWall || {};
  // var deathWallPosition = 0;

  function init() {
    // for (var iPlayer = 0; iPlayer < players.length; iPlayer++) {
    //   playerPositions[iPlayer] = 0;
    // }
  }

  function update() {
    if (!world.isReady) {
      return;
    }

    for (var iPlayer = 0; iPlayer < players.length; iPlayer++) {
      var player = players[iPlayer];
      if (!player.isLiving) {
        continue;
      }

      player.update(clone(world));

      if (player.position < deathWall.position) {
        player.injure();
      }
    }

    deathWall.update();
    // deathWallPosition+= deathWall.actionFlag ? 1 : 0;

    // for (var iPlayer = 0; iPlayer < players.length; iPlayer++) {
    //   var player = players[iPlayer];
    //   playerPositions[iPlayer] += player.actionFlag ? 1 : 0;
    // }
  }

  function addPlayer(player) {
    console.log('world', 'addPlayer');
    players.push(player);
  }

  function removePlayer(playerId) {
    console.log('world', 'removePlayer', arguments);
    console.log('world', 'removePlayer', '..', 'searching', players.length);

    var playerIndex = _getPlayerIndex(playerId)
    players.splice(playerIndex, 1);
    console.log('world', 'removePlayer', '..', 'matched', players.length);
  }

  function getPlayer(playerId) {
    var playerIndex = _getPlayerIndex(playerId);
    return players[playerIndex];
  }

  function _getPlayerIndex(playerId) {
    return players.findIndex(function (value, key) {
      var player = value;

      return player.id === playerId;
    });
    // for (var iPlayer = 0; iPlayer < players.length; iPlayer++) {
    //   var currentPlayer = players[iPlayer];
    //   if (currentPlayer.id === playerId) {
    //     return iPlayer;
    //   }
    // }
    //
    // throw "Invalid player id.";
    // return -1;
  }

  var world = {
    init: init,
    update: update,
    addPlayer: addPlayer,
    getPlayer: getPlayer,
    removePlayer: removePlayer
  };

  Object.defineProperty(world, 'players', {
    get: function () {
      return players;
    },
    enumerable: true
  });

  Object.defineProperty(world, 'deathWall', {
    get: function () {
      return deathWall;
    },
    enumerable: true
  });

  Object.defineProperty(world, 'isReady', {
    get: function () {
      var hasPlayers = players.length > 0;

      if (!hasPlayers) {
        return false;
      }

      var playersReady = players.reduce(function (accumulator, value, key) {
        return value.isReady && accumulator;
      }, true);

      return playersReady;
    },
    enumerable: true
  });

  return world;
}


// function AndroidGui(tmpWorld) {
//   var world = tmpWorld;
//   var players = world.players;

//   var playerTxts = [];

//   function init() {
//     console.log('test');

//     //Create a layout with objects vertically centered.
//     var lay = app.CreateLayout("linear", "VCenter,FillXY");

//     for (var iPlayer = 0; iPlayer < players.length; iPlayer++) { //Create a text label and add it to layout.

//       var txt = app.CreateText("Hello");
//       txt.SetTextSize(32);
//       lay.AddChild(txt);
//       playerTxts.push(txt);
//     }

//     //Add layout to app.
//     app.AddLayout(lay);
//   }

//   function update() {
//     for (var iPlayer = 0; iPlayer < players.length; iPlayer++) {
//       //   var player = players[iPlayer];
//       var position = world.positions[iPlayer];
//       playerTxts[iPlayer].SetText(position);
//     }
//   }

//   return {
//     init: init,
//     update: update
//   };
// }


exports.World = World;
